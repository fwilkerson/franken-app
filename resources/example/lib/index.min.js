!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?module.exports=factory():"function"==typeof define&&define.amd?define(factory):global.frankenApp=factory()}(this,function(){"use strict";function diff(oldView,newView){return oldView?newView?changed(oldView,newView)?{type:REPLACE_NODE,newView:newView}:newView.el?{type:UPDATE_NODE,children:diffChildren(oldView,newView),quirks:diffQuirks(oldView,newView)}:void 0:{type:REMOVE_NODE}:{type:CREATE_NODE,newView:newView}}function changed(oldView,newView){return typeof oldView!=typeof newView||"string"==typeof newView&&oldView!==newView||oldView.type!==newView.type}function diffChildren(oldView,newView){const patches=[],length=Math.max(oldView.children.length,newView.children.length);for(let i=0;i<length;i++)patches.push(diff(oldView.children[i],newView.children[i]));return patches}function diffQuirks(oldView,newView){const patches=[],quirks=Object.assign({},oldView.quirks,newView.quirks);return Object.keys(quirks).forEach(key=>{const oldVal=oldView.quirks[key],newVal=newView.quirks[key];newVal?oldVal&&oldVal===newVal||patches.push({type:SET_QUIRK,key:key,value:newVal}):patches.push({type:REMOVE_QUIRK,key:key,value:oldVal})}),patches}function patch(parent,patches,index=0){if(!patches)return;const el=parent.childNodes[index]||parent.childNodes[parent.childNodes.length-1];switch(patches.type){case CREATE_NODE:parent.appendChild(createElement(patches.newView));break;case REMOVE_NODE:el&&parent.removeChild(el);break;case REPLACE_NODE:parent.replaceChild(createElement(patches.newView),el);break;case UPDATE_NODE:const{children:children,quirks:quirks}=patches;quirks.forEach(patchQuirk.bind(null,el));for(let i=0,l=children.length;i<l;i++)patch(el,children[i],i)}}function patchQuirk(el,patch){switch(patch.type){case SET_QUIRK:el.setAttribute(patch.key,patch.value);break;case REMOVE_QUIRK:el.removeAttribute(patch.key)}}function createElement(view){if(!view.el)return document.createTextNode(view);const node=document.createElement(view.el);return setQuirks(node,view.quirks),view.children.map(createElement).forEach(node.appendChild.bind(node)),node}function setQuirks(node,quirks){quirks&&Object.keys(quirks).forEach(key=>{node.setAttribute(key,quirks[key])})}function getEventMap(view){function mapEvents(view){view.el&&(view.events&&view.quirks&&view.quirks.id&&(events[view.quirks.id]=view.events,uniqueEvents=uniqueEvents.concat(Object.keys(view.events).filter(key=>!uniqueEvents.some(x=>x===key)))),view.children.forEach(mapEvents))}let events={},uniqueEvents=[];return mapEvents(view),{events:events,uniqueEvents:uniqueEvents}}const CREATE_NODE="CREATE_NODE",REMOVE_NODE="REMOVE_NODE",REPLACE_NODE="REPLACE_NODE",UPDATE_NODE="UPDATE_NODE",SET_QUIRK="SET_QUIRK",REMOVE_QUIRK="REMOVE_QUIRK";return function({el:el,func:func,state:state,actions:actions}){function render(view,target){listenForEvents(_eventMap=getEventMap(view),target),target.appendChild(createElement(view))}function update(view){_eventMap=getEventMap(view);const patches=diff(_view,view);patch(_target,patches),_view=view}function listenForEvents({events:events,uniqueEvents:uniqueEvents},target){uniqueEvents.forEach(event=>{target.addEventListener(event,e=>routeEvent(e,e.target))})}function routeEvent(e,target){if(!target)return;const eventHandlers=_eventMap.events[target.id];if(eventHandlers&&eventHandlers[e.type])return eventHandlers[e.type](e);routeEvent(e,target.parentElement)}function dispatch(updateFunc){_state=updateFunc(_state),update(_func({actions:_actions,state:_state,dispatch:dispatch}))}let _view,_eventMap,_target=document.getElementById(el),_func=func,_state=state||{},_actions=actions||{};return function(){render(_view=_func({actions:_actions,state:_state,dispatch:dispatch}),_target)}}});